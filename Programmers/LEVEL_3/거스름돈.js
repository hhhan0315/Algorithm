function solution(n, money) {
  var dp = [1];

  for (var i = 1; i <= n; i++) {
    dp.push(0);
  }

  money.map((e) => {
    dp[e] += 1; // 딱 그 동전이 나오면 위의 수 +1
    for (let i = e + 1; i <= n; i++) {
      dp[i] += dp[i - e];
    }
  });
  // 1일 때 모두 1
  // 2일 때 dp[2]=dp[2]+1 =2
  // dp[3] = dp[3] + dp[1] = 2 (dp[3] : 위의 수 + dp[1] : n칸 이전 수) (2차원 배열하면 시간초과라서 1차원 배열 사용)

  // 0 1 2 3 4 5
  // 1 0 0 0 0 0 (초기)
  // 1 1 1 1 1 1 (1원) : 1원 일때
  // 1 1 2 2 3 3 (1,2원) : 2원 일 때 위의 수 +1, 이후는 위의 수 + n칸 이전 수(3 = 0번째 + 2번째 + 3번째)
  // 1 1 2 2 3 4 (1,2,5원)

  return dp[n];
}
